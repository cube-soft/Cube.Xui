trigger:
    - master
pool:
    vmImage: 'Windows-2019'
variables:
    PROJECT_NAME:   'Cube.Xui'
    PROJECT_MAIN:   'Cube.Xui'
    PROJECT_ARCH:   'Any CPU'
    PROJECT_CONFIG: 'Release'
    PROJECT_BIN:    'bin\$(PROJECT_ARCH)\$(PROJECT_CONFIG)\net45'
    PROJECT_LIB:    '..\packages'
    TEST_TOOL:      '$(PROJECT_LIB)\OpenCover\4.7.922\tools\OpenCover.Console.exe'
    TEST_CORETOOL:  '$(PROJECT_LIB)\NUnit.ConsoleRunner\3.10.0\tools\nunit3-console.exe'
    TEST_FILTERS:   '+[Cube*]* -[*]*NativeMethods -[*]*Properties.*'
    TEST_RESULT:    'TestResult.xml'
    TEST_COVERAGE:  'CoverResults.xml'
    TEST_LOG:       '$(Build.ArtifactStagingDirectory)\TestResults'
steps:
    - task: NuGetToolInstaller@0
      inputs:
        versionSpec: '>= 4.9'
      displayName: 'Use NuGet'

    - script: |
        nuget restore "$(PROJECT_MAIN).sln"
      displayName: 'Restore NuGet packages'

    - task: VSBuild@1
      inputs:
        solution: '$(PROJECT_MAIN).sln'
        platform: '$(PROJECT_ARCH)'
        configuration: '$(PROJECT_CONFIG)'
      displayName: 'Build solution'

    - script: >
        "$(TEST_TOOL)"
        -log:Error
        -register:user
        -target:"$(TEST_CORETOOL)"
        -targetargs:"$(PROJECT_NAME).Tests.dll"
        -targetdir:"Tests\$(PROJECT_BIN)"
        -returntargetcode
        -hideskipped:All
        -output:"$(TEST_COVERAGE)"
        -filter:"$(TEST_FILTERS)"
      displayName: 'Test Libraries'

    - task: NuGetCommand@2
      inputs:
        command: 'pack'
        packagesToPack: 'Libraries\$(PROJECT_NAME).csproj'
        configuration: '$(PROJECT_CONFIG)'
      displayName: 'Pack NuGet packages'

    - task: CopyFiles@2
      inputs:
        contents: '**\*.log'
        targetFolder: '$(TEST_LOG)'
        overWrite: true
        flattenFolders: true
      displayName: 'Copy test results'

    - task: CopyFiles@2
      inputs:
        contents: '$(TEST_COVERAGE)'
        targetFolder: '$(TEST_LOG)'
        overWrite: true
      displayName: 'Copy converage results'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'NUnit'
        testResultsFiles: '**\$(TEST_RESULT)'
      displayName: 'Publish test results'

    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: '$(PROJECT_NAME)'
        targetPath: '$(Build.ArtifactStagingDirectory)'
      displayName: 'Publish pipline artifacts'
